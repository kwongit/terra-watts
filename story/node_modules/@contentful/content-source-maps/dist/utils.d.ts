import type { SourceMapMetadata, EditorInterfaceSource, WidgetId, WidgetNamespace, FieldType, CPAEntry, CPAMappings, GraphQLMappings } from './types.js';
import { EntrySkeletonType } from 'contentful';
export declare const createSourceMapMetadata: ({ entityId, entityType, space, environment, field, locale, editorInterface, fieldType, targetOrigin, }: {
    entityId: string;
    entityType: string;
    space: string;
    environment: string;
    field: string;
    locale: string;
    editorInterface: EditorInterfaceSource;
    fieldType: string;
    targetOrigin?: 'https://app.contentful.com' | 'https://app.eu.contentful.com';
}) => SourceMapMetadata;
export declare const isBuiltinNamespace: (namespace: WidgetNamespace) => boolean;
export declare const isSupportedWidget: (widgetId: WidgetId) => boolean;
/**
 * Clones the incoming element into a new one, to prevent modification on the original object
 * Hint: It uses the structuredClone which is only available in modern browsers,
 * for older one it uses the JSON.parse(JSON.stringify) hack.
 */
export declare function clone<T extends Record<string, unknown> | Array<unknown>>(incoming: T): T;
export declare const SUPPORTED_WIDGETS: WidgetId[];
export declare function encodeField(fieldType: FieldType, currentValue: any, hiddenStrings: SourceMapMetadata, target: CPAEntry<EntrySkeletonType>, pointer: string, mappings: CPAMappings | GraphQLMappings, locale?: string): void;
